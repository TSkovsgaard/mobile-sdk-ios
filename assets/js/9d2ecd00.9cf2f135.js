"use strict";(self.webpackChunk_crowdin_mobile_sdk_ios_website=self.webpackChunk_crowdin_mobile_sdk_ios_website||[]).push([[343],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>b});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},g=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=d(n),p=o,b=c["".concat(s,".").concat(p)]||c[p]||u[p]||i;return n?r.createElement(b,a(a({ref:t},g),{},{components:n})):r.createElement(b,a({ref:t},g))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={},a="Debug and Logging",l={unversionedId:"guides/debug-and-logging",id:"guides/debug-and-logging",title:"Debug and Logging",description:'Crowdin iOS SDK provides detailed debug mode - "Logs" tab in the SDK Controls module and logging into XCode console.',source:"@site/docs/guides/debug-and-logging.md",sourceDirName:"guides",slug:"/guides/debug-and-logging",permalink:"/mobile-sdk-ios/guides/debug-and-logging",draft:!1,editUrl:"https://github.com/crowdin/mobile-sdk-ios/tree/master/website/docs/guides/debug-and-logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SDK Controls",permalink:"/mobile-sdk-ios/advanced-features/sdk-controls"},next:{title:"Swift UI Localization guide",permalink:"/mobile-sdk-ios/guides/swift-ui"}},s={},d=[],g={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"debug-and-logging"},"Debug and Logging"),(0,o.kt)("p",null,'Crowdin iOS SDK provides detailed debug mode - "Logs" tab in the ',(0,o.kt)("a",{parentName:"p",href:"/advanced-features/sdk-controls"},"SDK Controls")," module and logging into XCode console."),(0,o.kt)("p",null,"To enable console logging, add the following option to your ",(0,o.kt)("inlineCode",{parentName:"p"},"CrowdinSDKConfig"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},".with(debugEnabled: true)\n")),(0,o.kt)("p",null,"Crowdin SDK collects log messages for all actions performed by the SDK (login/logout, language downloads, API calls). There is a possibility to set up a callback for these logs. This callback will return log text every time a new log is created. To subscribe to receive log messages, just add a new callback like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'CrowdinSDK.setOnLogCallback { logMessage in\n   print("LOG MESSAGE - \\(logMessage)")\n}\n')))}u.isMDXComponent=!0}}]);